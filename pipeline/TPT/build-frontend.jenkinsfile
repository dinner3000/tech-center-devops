pipeline {
    parameters { 
        string(name: 'BRANCH', defaultValue: 'master', description: '') 
    }
    
    environment {
        REPO_NAME = 'TPT'
        BUILD_TM = sh(script: "TZ='Asia/Shanghai' date +%Y%m%d_%H%M%S", returnStdout: true).trim()
        DIST_ROOT = '/root/dist/tpt-target'
        WORK_DIR = 'frontend'
    }
    
    agent {
        docker {
            image 'node:10.23.0-buster-slim'
            args '-v /root/.npm:/root/.npm ' + 
                '-v /root/.npmrc:/root/.npmrc ' + 
                '-v /root/dist:/root/dist'
        }
    }

    stages {
        stage('checkout repo') {
            steps {
                checkoutRepo(assembleRepoUrl(env.TC_REPO_URL_TPL, 
                    env.REPO_NAME, env.TC_REPO_ACCESS_TOKEN), "*/${BRANCH}")
                sh 'pwd; ls -al'
            }
        }
        
        stage('npm build') {
            steps {
                dir(env.WORK_DIR) {
                    execNpmBuild()
                    archiveTargets(env.DIST_ROOT, env.BUILD_TM)
                    sh 'pwd; ls -al'
                }
            }
        }
        
        stage('upgrade container') {
            steps {
                upgradeContainer('tpt-backend', 'tpt-backend', env.BUILD_TM)
            }
        }
    }
    
    post { 
        always { 
            cleanWs()
        }
    }
}

def assembleRepoUrl(String urlTpl, String repoName, String token) {
    String url = urlTpl.replace('#_TOKEN_', token).replace('#_REPO_', repoName)
    return url
}

def checkoutRepo(String repoUrl, String branch) {
    checkout([
        $class: 'GitSCM', branches: [[name: branch]], 
        doGenerateSubmoduleConfigurations: false, 
        extensions: [[$class: 'CloneOption', depth: 1, noTags: false, reference: '', shallow: true]], 
        submoduleCfg: [], 
        userRemoteConfigs: [[url: repoUrl]]
    ])
}

def execNpmBuild() {
    sh 'npm -v; npm install'
    sh 'npm run dist'
}

def archiveTargets(String archiveRoot, String buildNumber, String targetPattern = '*') {
    String archiveDest = archiveRoot + '/' + buildNumber
    sh 'mkdir -p ' + archiveDest
    sh 'mv -fv ./lib/' + targetPattern + ' ' + archiveDest + '/'
    // sh 'find ./ -regex "' + targetPattern + '" -exec cp -v {} ' + archiveDest + '/ \\;'
}

def buildImage(String workDir, String imageName, String imageTag) {
    dir(workDir) {
        script {
            docker.build(imageName + ':' + imageTag)
        }
    }
}

def upgradeContainer(String containerName, String imageName, String imageTag) {
    sh 'echo docker rm -f ' + containerName
    sh 'echo docker run -d --name ' + containerName + ' ... ' + imageName
}
